import AWG_lib
reload(AWG_lib)
import Waveform_PresetAmp as Wav
import numpy as np
#import qt
import matplotlib.pyplot as plt



### SETTING AWG
##
AWG_clock = 10e6        # Wanted AWG clock. Info https://www.google.at/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0ahUKEwjI5KCdy_TLAhXFuxQKHamZAHoQFggcMAA&url=http%3A%2F%2Fwww.tek.com%2Fdl%2F76W-19764-1.pdf&usg=AFQjCNGsPEYMv-JCA5vht2I1cSlzCVVVAA&sig2=RFFJuEw5rKO_uGo69H7U2A&cad=rja
											# In pdf on link read section "AWG: Simple Concept, Maximum Flexibility"
											
						# Take care about waveform and sequence length and clock rate  - AWG has limited capability
AWGMax_amp = 2          # In AmpUnits!!! Maximum needed amplitude on all channels for your particular experiment (noise reduction) - need to be set at the beginning
Seq_length = 10       # Sequence length (number of periods - waveforms)
t_sync = 2              # Duration of synchronization element in sequence in "TimeUnits"
Automatic_sequence_generation = False   # Flag for determining type of sequence generation: Automatic - True,  Manual - False 


sync = Wav.Waveform(waveform_name = 'WAV1elem%d'%0, AWG_clock = AWG_clock, TimeUnits = 'ms' , AmpUnits = 'mV') # First element in sequence is synchronization element
compensate = Wav.Waveform(waveform_name = 'WAV1elem%d'%1, AWG_clock = AWG_clock, TimeUnits = 'ms' , AmpUnits = 'mV') # Second element in sequence is element for substracting mean value




#### AUTOMATIC sequence generation - sequnce is generated by interpolation between waveforms p1 and p2
if Automatic_sequence_generation:   # If user wants Automatic sequence generation (Automatic_sequence_generation = True)        
    
    p1 = Wav.Waveform(waveform_name = 'WAV1', AWG_clock = AWG_clock, TimeUnits = 'ms' , AmpUnits = 'mV')  # Generating waveform object p1
                                                                                                          # Important is to define TimeUnits and AmpUnits    
    p1.setValuesCH1([1,500], [0.5, 0], [0.5, 0]) # Setting waveform shape for waveform object p1 for AWG channel 1 - [Time1,Amp1],[Time2,Amp2]...  Time in TimeUnits and Amp in AmpUnits
    p1.setMarkersCH1([1,1,1],[0,1,0]) # Setting marker values (M1 and M2) for waveform object p1 for AWG channel 1  - Markers are repeated every period
    p1.setValuesCH2([1,500], [0.5, 0], [0.5, 0]) 
    p1.setMarkersCH2([1,0,0],[1,0,0])


    p2 = Wav.Waveform(waveform_name = 'WAV2', AWG_clock = AWG_clock, TimeUnits = 'ms' , AmpUnits = 'mV')  # Generating waveform object p2
    
    p2.setValuesCH1([1,500], [0.5, 0], [0.5, 0])  # Setting waveform shape for waveform object p2 for AWG channel 1 - [Time1,Amp1],[Time2,Amp2]...  Time in TimeUnits and Amp in AmpUnits       
    p2.setMarkersCH1([1,1,1],[0,1,0]) # Setting markers values (M1 and M2) for waveform object p2 for AWG channel 1 - Markers are repeated every period
    p2.setValuesCH2([1,500], [0.5, 0], [0.5, 0]) 
    p2.setMarkersCH2([1,0,0],[1,0,0])

    seq = p1.interpolate_to(Seq_length,p2)   # Creating sequence by interpolation between wavefrom p1 and p2 in Seq_length number of steps
    seq2 = seq


    AWG_lib.set_waveform(seq,AWG_clock,AWGMax_amp,Seq_length, sync, compensate, t_sync)  # Function for uploading and setting all sequence waveforms to AWG 



#### MANUAL sequence generation - sequnce is generated manually - more flexible
if not(Automatic_sequence_generation):  # If user wants manual sequence generation (Automatic_sequence_generation = False)

    seqCH1 = list() # Initializing list for channel 1 sequence
    seqCH2 = list()	# Initializing list for channel 2 sequence
    seq = list() # Initializing list that will contain all sequences (all channels)

    A1 = np.array([100,100,-100]) # Initial amplitudes
    delta_A1 = A1[1]/((Seq_length-1)/2.0) 
    A2 = np.array([-200,-200,200]) # Initial amplitudes
    delta_A2 = A2[1]/((Seq_length-1)/2.0)  

    

    for i in xrange(Seq_length):   # Creating waveforms for all sequence elements
        p = Wav.Waveform(waveform_name = 'WAV1elem%d'%(i+2), AWG_clock = AWG_clock, TimeUnits = 'ms' , AmpUnits = 'mV')  # Generating next object wavefrom in sequnce
                                                                                                                         # Starting from 3rd element (WAV1elem%d'%(i+2)) 
                                                                                                                         # because sync and compensate sequence elements are 1st and 2nd
        
        if i == 0:
            
            p.setValuesCH1([2,0], [2,0], [2,0])  # Starting element in sequence with zero amp for synchronization reasons
            p.setMarkersCH1([0,0,0],[0,0,0])   # Starting element in sequence with zero marker amp for synchronization reasons
        else:
            p.setValuesCH1([0.5,A1[0]], [0.5,A1[1]], [0.5,A1[2]]) # Setting waveform shape for one wavefrom object p in sequence seq for AWG channel 1 - [Time1,Amp1],[Time2,Amp2]...  Time in TimeUnits and Amp in AmpUnits
            p.setMarkersCH1([1,1,1],[0,0,0])  # Setting marker just in the first wavefrom of the sequence (further is zero)
        #A1[1] = A1[1] - delta_A1 # Defining amplitude change between wavefroms in sequence

        
        if i == 0:
            
            p.setValuesCH2([2,0], [2,0], [2,0])  # Starting element in sequence with zero amp for synchronization reasons
            p.setMarkersCH2([0,0,0],[0,0,0])   # Starting element in sequence with zero marker amp for synchronization reasons
        else:
            p.setValuesCH2([0.5,A2[0]], [0.5,A2[1]], [0.5,A2[2]]) # Setting waveform shape for one wavefrom object p in sequence seq for AWG channel 1 - [Time1,Amp1],[Time2,Amp2]...  Time in TimeUnits and Amp in AmpUnits
            p.setMarkersCH2([1,1,1],[0,0,0])  # Setting marker just in the first wavefrom of the sequence (further is zero)
        #A2 = A2 - delta_A2 # Defining amplitude change between wavefroms in sequence
    

    
        seqCH1.append(p.CH1) # Filing sequence list for channel 1 (seqCH1) with next waveform (period)
        seqCH2.append(p.CH2) # Filing sequence list for channel 2 (seqCH2) with next waveform (period)
    

    seq.append(seqCH1) # Putting sequence list for channel 1 in list that contain all sequences (all channels)
    seq.append(seqCH2) # Putting sequence list for channel 2 in list that contain all sequences (all channels)



    AWG_lib.set_waveform(seq,AWG_clock,AWGMax_amp,Seq_length, sync, compensate, t_sync) # Function for uploading and setting all sequence waveforms to AWG 
    
    raw_input("Press Enter if uploading to AWG is finished")